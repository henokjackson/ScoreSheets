from config import globals
from multiprocessing import cpu_count
from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setFixedSize(453, 345)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("assets/misc/gear.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        Dialog.setStyleSheet("background-color: rgb(236, 234, 231);")
        #Dialog.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.outputfile_label = QtWidgets.QLabel(Dialog)
        self.outputfile_label.setGeometry(QtCore.QRect(60, 100, 161, 17))
        self.outputfile_label.setObjectName("outputfile_label")
        self.outputfileext_label = QtWidgets.QLabel(Dialog)
        self.outputfileext_label.setGeometry(QtCore.QRect(397, 100, 161, 17))
        self.outputfileext_label.setObjectName("outputfileext_label")
        self.markingschemefile_label = QtWidgets.QLabel(Dialog)
        self.markingschemefile_label.setGeometry(QtCore.QRect(50, 130, 171, 17))
        self.markingschemefile_label.setObjectName("markingschemefile_label")
        self.apply_pushButton = QtWidgets.QPushButton(Dialog)
        self.apply_pushButton.setGeometry(QtCore.QRect(186, 300, 89, 25))
        self.apply_pushButton.setObjectName("apply_pushButton")
        self.apply_pushButton.clicked.connect(self.ApplySettings)
        self.threadnoun_label = QtWidgets.QLabel(Dialog)
        self.threadnoun_label.setGeometry(QtCore.QRect(330, 70, 51, 17))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.threadnoun_label.setFont(font)
        self.threadnoun_label.setObjectName("threadnoun_label")
        self.devmsg2_label = QtWidgets.QLabel(Dialog)
        self.devmsg2_label.setGeometry(QtCore.QRect(100, 190, 261, 20))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setBold(True)
        font.setWeight(75)
        self.devmsg2_label.setFont(font)
        self.devmsg2_label.setStyleSheet("color: rgb(237, 51, 59);")
        self.devmsg2_label.setObjectName("devmsg2_label")
        self.outputfilename_lineEdit = QtWidgets.QLineEdit(Dialog)
        self.outputfilename_lineEdit.setGeometry(QtCore.QRect(230, 100, 161, 20))
        self.outputfilename_lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.outputfilename_lineEdit.setObjectName("outputfilename_lineEdit")
        self.outputfilename_lineEdit.setText(globals.outputFileName)
        self.devmsg_label = QtWidgets.QLabel(Dialog)
        self.devmsg_label.setGeometry(QtCore.QRect(70, 170, 301, 20))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setBold(True)
        font.setWeight(75)
        self.devmsg_label.setFont(font)
        self.devmsg_label.setStyleSheet("color: rgb(237, 51, 59);")
        self.devmsg_label.setObjectName("devmsg_label")
        self.browse_pushButton = QtWidgets.QPushButton(Dialog)
        self.browse_pushButton.setGeometry(QtCore.QRect(400, 130, 21, 21))
        self.browse_pushButton.setObjectName("browse_pushButton")
        self.browse_pushButton.clicked.connect(self.FeatureUnderDevelopmentMessage)
        self.title_label = QtWidgets.QLabel(Dialog)
        self.title_label.setGeometry(QtCore.QRect(170, 10, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
        self.markingschemefile_lineEdit = QtWidgets.QLineEdit(Dialog)
        self.markingschemefile_lineEdit.setGeometry(QtCore.QRect(230, 130, 161, 20))
        self.markingschemefile_lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.markingschemefile_lineEdit.setObjectName("markingschemefile_lineEdit")
        self.threadcount_label = QtWidgets.QLabel(Dialog)
        self.threadcount_label.setGeometry(QtCore.QRect(50, 70, 241, 17))
        self.threadcount_label.setObjectName("threadcount_label")
        self.noofthreads_lineEdit = QtWidgets.QLineEdit(Dialog)
        self.noofthreads_lineEdit.setGeometry(QtCore.QRect(300, 70, 20, 20))
        self.noofthreads_lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.noofthreads_lineEdit.setText(str(globals.noOfThreads))
        self.noofthreads_lineEdit.setObjectName("noofthreads_lineEdit")
        self.devmsgimg_label = QtWidgets.QLabel(Dialog)
        self.devmsgimg_label.setGeometry(QtCore.QRect(110, 220, 241, 61))
        self.devmsgimg_label.setText("")
        self.devmsgimg_label.setPixmap(QtGui.QPixmap("assets/misc/experimental.png"))
        self.devmsgimg_label.setScaledContents(True)
        self.devmsgimg_label.setObjectName("devmsgimg_label")
        self.title_line = QtWidgets.QFrame(Dialog)
        self.title_line.setGeometry(QtCore.QRect(160, 40, 141, 20))
        self.title_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.title_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.title_line.setObjectName("title_line")
        self.logo_label = QtWidgets.QLabel(Dialog)
        self.logo_label.setGeometry(QtCore.QRect(140, 10, 31, 31))
        self.logo_label.setText("")
        self.logo_label.setPixmap(QtGui.QPixmap("assets/misc/gear.png"))
        self.logo_label.setScaledContents(True)
        self.logo_label.setObjectName("logo_label")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Settings"))
        self.outputfile_label.setText(_translate("Dialog", "Output CSV File Name :"))
        self.outputfileext_label.setText(_translate("Dialog", ".csv"))
        self.markingschemefile_label.setText(_translate("Dialog", "Making Scheme CSV File :"))
        self.apply_pushButton.setText(_translate("Dialog", "Apply"))
        self.threadnoun_label.setText(_translate("Dialog", "Threads"))
        self.devmsg2_label.setText(_translate("Dialog", "and are currently experimental ***"))
        self.devmsg_label.setText(_translate("Dialog", "*** These features are under development"))
        self.browse_pushButton.setToolTip(_translate("Dialog", "Browse"))
        self.browse_pushButton.setText(_translate("Dialog", "..."))
        self.title_label.setText(_translate("Dialog", "Configuration"))
        self.threadcount_label.setText(_translate("Dialog", "No. of Threads for PDF Extraction : "))

    def ThreadCountExceededErrorMessage(self):
        noOfThreadCountExceededMessageBox = QtWidgets.QMessageBox()
        noOfThreadCountExceededMessageBox.setIcon(QtWidgets.QMessageBox.Critical)
        noOfThreadCountExceededMessageBox.setText("Thread count exceeds maximum count of (" + str(cpu_count()) +"), Please change the thread count.")
        noOfThreadCountExceededMessageBox.setWindowTitle("Warning - Cannot Apply Settings")
        noOfThreadCountExceededMessageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        noOfThreadCountExceededMessageBox.exec_()

    def FeatureUnderDevelopmentMessage(self):
        featureUnderDevelopmentMessageBox = QtWidgets.QMessageBox()
        featureUnderDevelopmentMessageBox.setIcon(QtWidgets.QMessageBox.Information)
        featureUnderDevelopmentMessageBox.setText("This feature is currently under development.")
        featureUnderDevelopmentMessageBox.setWindowTitle("Information")
        featureUnderDevelopmentMessageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        featureUnderDevelopmentMessageBox.exec_()

    def ApplySettings(self):
        noOfThreads = int(self.noofthreads_lineEdit.text())
        if noOfThreads > cpu_count():
            self.ThreadCountExceededErrorMessage()
        else:
            globals.noOfThreads = noOfThreads
            globals.markingSchemeFilePath = self.markingschemefile_lineEdit.text()
            globals.outputFileName = self.outputfilename_lineEdit.text()

def Start():
    dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(dialog)
    dialog.setWindowModality(QtCore.Qt.ApplicationModal)
    dialog.show()
    dialog.exec_()